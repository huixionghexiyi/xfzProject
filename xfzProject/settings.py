# -*- coding: utf-8 -*-
"""
Django settings for xfzProject project.

Generated by 'django-admin startproject' using Django 2.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'krqx83rn&=!%#s=c*61df+_lw5nehqdgw(&=qk*&d8)0*h8%^z'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG Toolbar
DEBUG_TOOLBAR_PANELS = [
    # django version
    'debug_toolbar.panels.versions.VersionsPanel',
    # load used time
    'debug_toolbar.panels.timer.TimerPanel',
    # show settings
    'debug_toolbar.panels.settings.SettingsPanel',
    # req/resp header
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.cache.CachePanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    'debug_toolbar.panels.logging.LoggingPanel',
    'debug_toolbar.panels.redirects.RedirectsPanel',
    'debug_toolbar.panels.profiling.ProfilingPanel',
]

# 允许通过一下ip访问
ALLOWED_HOSTS = ['192.168.150.131', "0.0.0.0"]

INTERNAL_IPS = ["127,0,0,1", '0.0.0.0', "*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 提供给django的搜索接口，底层可以是不同的搜索引擎：
    # Solr、Elasticsearch、Whoosh、Xapian等。本项目使用Whoosh
    # 需要 pip install django-jaystack whoosh
    'haystack',
    # 安装自定义的应用
    'apps.xfzauth',
    'apps.cms',
    'apps.news',
    'apps.payinfo',
    'apps.course',
    'rest_framework',  # django的RESTful API 这里用来序列化对象
    'debug_toolbar',  # debug toolbar工具
]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',  # 该中间件尽可能靠前
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'xfzProject.urls'


# 模板文件
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # modification templates dir to front/templates
        'DIRS': [os.path.join(BASE_DIR, 'front', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            # 上下文处理器，会给模板添加如下变量
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            # 自动导入静态文件，以后就不用写 {% load static %} 就可以直接使用{% static 'js/...'%}标签
            'builtins':[
                'django.templatetags.static'
            ]
        },
    },
]

WSGI_APPLICATION = 'xfzProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# 配置mysql数据库

# django cant identified mysql8 encrypt,so u should change mysql`s encrypt type.


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'xfz',
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'USER': 'root',
        'PASSWORD': '123456'
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# 鉴权model
AUTH_USER_MODEL = 'xfzauth.User'

# 缓存设置,设置memcached缓存
CACHES = {
    'default': {
        'BACKEND': "django.core.cache.backends.memcached.MemcachedCache",
        'LOCATION': '192.168.150.131:11211'
    }
}
# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

# 静态文件
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'front', 'dist')
]

# 媒体文件保存的相对路径
MEDIA_URL = '/media/'
# 文件保存的绝对路径
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# 一次加载的文章数

ONE_PAGE_NEWS_COUNT = 2


# # 会使用jquery来在前端展示。所以配置jquery有助于加快速度
DEBUG_TOOLBAR_CONFIG = {
    'JQUERY_URL': '',  # 为空 不加载jquery，因为本身前端已经使用了。
    # 或把jquery下载到本地然后取消下面这句的注释, 并把上面那句删除或注释掉
    # 'JQUERY_URL': '/static/jquery/2.1.4/jquery.min.js',
    'SHOW_COLLAPSED': True,
    'SHOW_TOOLBAR_CALLBACK': lambda x: True,
}

'''
配置HAYSTACK搜索引擎
'''

HAYSTACK_CONNECTIONS = {
    'default': {
        # 修改whoosh中的分词分析器，使其能够对中文进行分词处理。
        'ENGINE': 'apps.news.whoosh_cn_backend.WhooshEngine',
        # 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),  # 索引文件
    }
}

# 增删改查后会自动创建索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
